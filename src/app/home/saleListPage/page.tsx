'use client';

import React, { useEffect, useState } from 'react';
import {
  Box,
  Container,
  Typography,
  Card,
  CardContent,
  Chip,
  Stack,
  CircularProgress,
  Divider,
  Paper,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  TextField,
  Select,
  MenuItem,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
} from '@mui/material';
import ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';
import ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos';
import dayjs from 'dayjs';
import { motion, AnimatePresence } from 'framer-motion';
import PayRemainingModal from './components/PayRemainingModal';

type CartItem = {
  name: string;
  unitPrice: number;
  totalPrice: number;
  deposit?: number;
  remaining?: number;
  fullPayment?: boolean;
  extra?: Record<string, any>;
  productNote?: string;
  category: string;
  qty: number;
  sides: string;
  colorMode: string;
  material: string;
  size: string;
  shape: string;
  type: string;
};

type Order = {
  _id: string;
  orderId: string;
  customerName?: string;
  phoneNumber?: string;
  note?: string;
  category: string;
  total: number;
  remainingTotal: number;
  discount?: number;
  payment: 'cash' | 'promptpay';
  status: 'pending' | 'paid' | 'cancelled';
  createdAt: string;
  cart: CartItem[];
};

export default function OrdersPage() {
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState<'all' | 'paid' | 'debt' | 'pending' | 'cancelled'>('all');
  const [search, setSearch] = useState('');
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);

  const [page, setPage] = useState(0);
  const pageSize = 6;

  //PayRemainingModal

  const [payDialogOpen, setPayDialogOpen] = useState(false);

  const getPaymentChip = (order: Order) => {
    const remainingTotal = order.remainingTotal ?? order.cart.reduce((s, i) => s + (i.remaining || 0), 0);

    if (order.status === 'cancelled') {
      return <Chip label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" color="error" size="small" />;
    }
    if (remainingTotal === 0) {
      return <Chip label="‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß" color="success" size="small" />;
    }
    return <Chip label="‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞" color="warning" size="small" />;
  };

  useEffect(() => {
    const base = process.env.NEXT_PUBLIC_API_URL ?? '';
    if (!base) return;

    fetch(`${base}/orders`)
      .then(async res => {
        if (!res.ok) throw new Error('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
        return res.json();
      })
      .then(data => {
        setOrders(data);
        setLoading(false);
      })
      .catch(() => setLoading(false));
  }, []);

  const filteredOrders = orders.filter(order => {
    const remaining = order.cart.reduce((s, i) => s + (i.remaining || 0), 0);

    if (filter === 'debt') {
      return order.status !== 'cancelled' && remaining > 0;
    }

    if (filter === 'paid') {
      return order.status !== 'cancelled' && remaining === 0;
    }

    if (filter === 'cancelled') {
      return order.status === 'cancelled';
    }

    if (filter === 'pending') {
      return order.status === 'pending';
    }

    if (search) {
      return order.orderId.toLowerCase().includes(search.toLowerCase()) || order.customerName?.toLowerCase().includes(search.toLowerCase());
    }

    return true;
  });

  const totalPages = Math.ceil(filteredOrders.length / pageSize);
  const paginatedOrders = filteredOrders.slice(page * pageSize, page * pageSize + pageSize);

  if (loading) {
    return (
      <Box textAlign="center" py={5}>
        <CircularProgress />
        <Typography mt={2}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</Typography>
      </Box>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ py: 3 }}>
      <Typography variant="h5" fontWeight={800} mb={3} color="black">
        üìã ‡πÉ‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (Sales Orders)
      </Typography>

      {/* üîé Search + Filter */}
      <Stack direction="row" justifyContent="space-between" alignItems="center" spacing={2} mb={3} flexWrap="wrap">
        <TextField size="small" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå / ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤..." value={search} onChange={e => setSearch(e.target.value)} sx={{ flex: 1, maxWidth: 300 }} />

        <Select size="small" value={filter} onChange={e => setFilter(e.target.value as any)} sx={{ minWidth: 160 }}>
          <MenuItem value="all">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</MenuItem>
          <MenuItem value="paid">‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß</MenuItem>
          <MenuItem value="debt">‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞</MenuItem>
          <MenuItem value="pending">‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</MenuItem>
          <MenuItem value="cancelled">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</MenuItem>
        </Select>
      </Stack>

      {orders.length === 0 ? (
        <Typography align="center" color="text.secondary" mt={5}>
          ‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        </Typography>
      ) : (
        <>
          {/* ‚úÖ Cards (animate) */}
          <Box position="relative" mb={4}>
            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ã‡πâ‡∏≤‡∏¢ */}
            <IconButton
              onClick={() => setPage(p => Math.max(p - 1, 0))}
              disabled={page === 0}
              sx={{
                position: 'absolute',
                top: '40%',
                left: -60,
                zIndex: 1,
                bgcolor: 'white',
                boxShadow: 2,
              }}>
              <ArrowBackIosNewIcon />
            </IconButton>

            {/* ‡∏Å‡∏≤‡∏£‡πå‡∏î 6 ‡πÉ‡∏ö */}
            <Box
              sx={{
                display: 'grid',
                gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr', lg: '1fr 1fr 1fr' },
                gap: 2,
              }}>
              <AnimatePresence mode="wait">
                {paginatedOrders.map(order => {
                  const depositTotal = order.cart.reduce((s, it) => s + (it.deposit || 0), 0);
                  const remainingTotal = order.cart.reduce((s, it) => s + (it.remaining || 0), 0);

                  return (
                    <motion.div key={order._id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} onClick={() => setSelectedOrder(order)} exit={{ opacity: 0, y: -20 }}>
                      <Card
                        variant="outlined"
                        sx={{
                          borderRadius: 3,
                          boxShadow: '0 4px 16px rgba(0,0,0,0.05)',
                          display: 'flex',
                          flexDirection: 'column',
                          justifyContent: 'space-between',
                          minHeight: 450,
                        }}>
                        <CardContent>
                          <Stack direction="row" justifyContent="space-between" mb={0.5}>
                            <Typography variant="subtitle2" color="text.secondary">
                              {dayjs(order.createdAt).format('DD/MM/YYYY HH:mm')}
                            </Typography>
                            {getPaymentChip(order)}
                          </Stack>

                          <Typography variant="subtitle1" fontWeight={700}>
                            ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ : {order.orderId}
                          </Typography>

                          <Divider sx={{ my: 1 }} />

                          <Typography variant="body2">‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ : {order.customerName || '-'}</Typography>

                          <Typography variant="body2">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå : {order.phoneNumber || '-'}</Typography>
                          <Typography variant="body2">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ : {order.note}</Typography>
                          {depositTotal > 0 ? (
                            remainingTotal === 0 ? (
                              <Typography variant="body2" color="success.main">
                                ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô : ‡∏ø{order.total.toLocaleString('th-TH')}
                              </Typography>
                            ) : (
                              <>
                                <Typography variant="body2" color="info.main">
                                  ‡∏¢‡∏≠‡∏î‡∏°‡∏±‡∏î‡∏à‡∏≥‡∏£‡∏ß‡∏°: ‡∏ø{depositTotal.toLocaleString('th-TH')}
                                </Typography>
                              </>
                            )
                          ) : null}

                          <Divider sx={{ my: 1 }} />
                          {Object.entries(
                            order.cart.reduce((acc: Record<string, CartItem[]>, item) => {
                              if (!acc[item.category]) acc[item.category] = [];
                              acc[item.category].push(item);
                              return acc;
                            }, {})
                          ).map(([category, items]) => (
                            <Box key={category} sx={{ mb: 1 }}>
                              <Typography variant="body2" fontWeight={600}>
                                ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô : {category}
                              </Typography>
                              {items.map((item, i) => (
                                <Typography key={i} variant="body2" sx={{ pl: 3 }}>
                                  - {item.productNote || item.name} {item.totalPrice.toLocaleString('th-TH')}‡∏ø
                                </Typography>
                              ))}
                            </Box>
                          ))}
                        </CardContent>

                        <Box
                          sx={{
                            bgcolor: 'grey.50',
                            borderTop: '1px solid #eee',
                            p: 2,
                            display: 'flex',
                            flexDirection: 'column',
                            alignItems: 'flex-end',
                          }}>
                          <Typography fontWeight={700} color="success.main">
                            ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î : ‡∏ø{order.total.toLocaleString('th-TH')}
                          </Typography>

                          {remainingTotal > 0 ? (
                            <Typography variant="body2" color="warning.main">
                              ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ‡∏ø{remainingTotal.toLocaleString('th-TH')}
                            </Typography>
                          ) : (
                            <Typography variant="body2" color="success.main">
                              ‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
                            </Typography>
                          )}
                          <Typography variant="body2">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞ : {order.payment === 'cash' ? '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î' : 'PromptPay'}</Typography>
                        </Box>
                      </Card>
                    </motion.div>
                  );
                })}
              </AnimatePresence>
            </Box>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏ß‡∏≤ */}
            <IconButton
              onClick={() => setPage(p => Math.min(p + 1, totalPages - 1))}
              disabled={page >= totalPages - 1}
              sx={{
                position: 'absolute',
                top: '40%',
                right: -60,
                zIndex: 1,
                bgcolor: 'white',
                boxShadow: 2,
              }}>
              <ArrowForwardIosIcon />
            </IconButton>

            {/* ‡∏ï‡∏±‡∏ß‡∏ö‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤ */}
            <Box textAlign="center" mt={2}>
              <Typography variant="body2" color="text.secondary">
                ‡∏´‡∏ô‡πâ‡∏≤ {page + 1} / {totalPages}
              </Typography>
            </Box>
          </Box>

          {/* ‚úÖ Table (animate) */}
          <motion.div initial={{ opacity: 0, y: 30 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
            <Card variant="outlined" sx={{ borderRadius: 3, overflow: 'hidden' }}>
              <Typography variant="h6" fontWeight={700} sx={{ p: 2 }}>
                üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </Typography>
              <Paper sx={{ width: '100%', overflowX: 'auto' }}>
                <Table size="small" stickyHeader>
                  <TableHead>
                    <TableRow>
                      <TableCell>Order ID</TableCell>
                      <TableCell>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</TableCell>
                      <TableCell>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</TableCell>
                      <TableCell>‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</TableCell>
                      <TableCell>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableCell>
                      <TableCell>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</TableCell>
                      <TableCell>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {filteredOrders.map(order => (
                      <TableRow key={order._id} hover>
                        <TableCell>{order.orderId}</TableCell>
                        <TableCell>{order.customerName || '-'}</TableCell>
                        <TableCell>{order.phoneNumber || '-'}</TableCell>
                        <TableCell>{order.category || order.cart?.[0]?.name || '-'}</TableCell>
                        <TableCell>{getPaymentChip(order)}</TableCell>
                        <TableCell>‡∏ø{order.total.toLocaleString('th-TH')}</TableCell>
                        <TableCell>{order.createdAt ? dayjs(order.createdAt).format('DD/MM/YYYY HH:mm') : '-'}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </Paper>
            </Card>
          </motion.div>
        </>
      )}
      <Dialog open={Boolean(selectedOrder)} onClose={() => setSelectedOrder(null)} maxWidth="sm" fullWidth>
        <DialogTitle sx={{ fontWeight: 700 }}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #{selectedOrder?.orderId}</DialogTitle>

        <DialogContent dividers>
          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ */}
          <Stack spacing={1} mb={2}>
            <Typography>
              <strong>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</strong> {selectedOrder?.customerName}
            </Typography>
            <Typography>
              <strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</strong> {selectedOrder?.phoneNumber}
            </Typography>
            <Typography>
              <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {selectedOrder?.note || '-'}
            </Typography>
          </Stack>

          <Divider sx={{ my: 2 }} />

          {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
          <Typography fontWeight={700} gutterBottom>
            üõí ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          </Typography>

          <Stack spacing={2}>
            {selectedOrder?.cart.map((item, i) => (
              <Box
                key={i}
                sx={{
                  p: 2,
                  border: '1px solid #eee',
                  borderRadius: 2,
                  bgcolor: 'grey.50',
                }}>
                <Typography fontWeight={600} gutterBottom>
                  {i + 1}. {item.category} {item.productNote ? `(${item.productNote})` : ''}
                </Typography>

                {/* ‡∏ô‡∏≤‡∏°‡∏ö‡∏±‡∏ï‡∏£ */}
                {item.category === '‡∏ô‡∏≤‡∏°‡∏ö‡∏±‡∏ï‡∏£' && (
                  <Stack spacing={0.5} pl={2}>
                    <Typography variant="body2">‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {item.qty} ‡πÉ‡∏ö</Typography>
                    <Typography variant="body2">‚Ä¢ ‡∏î‡πâ‡∏≤‡∏ô: {item.sides} ‡∏î‡πâ‡∏≤‡∏ô</Typography>
                    <Typography variant="body2">‚Ä¢ ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏µ: {item.colorMode === 'bw' ? '‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥' : item.colorMode === 'color' ? '‡∏™‡∏µ' : item.colorMode}</Typography>
                    <Typography variant="body2">‚Ä¢ ‡∏ß‡∏±‡∏™‡∏î‡∏∏: {item.material}</Typography>
                    <Typography variant="body2">‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤ : {item.totalPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó</Typography>
                  </Stack>
                )}

                {/* ‡∏ï‡∏£‡∏≤‡∏¢‡∏≤‡∏á */}
                {item.category === '‡∏ï‡∏£‡∏≤‡∏¢‡∏≤‡∏á' && (
                  <Stack spacing={0.5} pl={2}>
                    <Typography variant="body2">‚Ä¢ ‡∏ä‡∏ô‡∏¥‡∏î: {item.type === 'normal' ? '‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤' : item.type === 'inked' ? '‡∏´‡∏°‡∏∂‡∏Å‡πÉ‡∏ô‡∏ï‡∏±‡∏ß' : item.type}</Typography>
                    <Typography variant="body2">‚Ä¢ ‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á: {item.shape === 'square' ? '‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°' : item.shape === 'circle' ? '‡∏ß‡∏á‡∏Å‡∏•‡∏°' : item.shape}</Typography>
                    <Typography variant="body2">‚Ä¢ ‡∏Ç‡∏ô‡∏≤‡∏î: {item.size}</Typography>
                    <Typography variant="body2">‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {item.qty} ‡∏ä‡∏¥‡πâ‡∏ô</Typography>
                    <Typography variant="body2">‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤ : {item.totalPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó</Typography>
                  </Stack>
                )}
                {/* ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ */}
                {item.category === '‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£' && (
                  <Stack spacing={0.5} pl={2}>
                    <Typography variant="body2">‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {item.qty} ‡πÉ‡∏ö</Typography>
                    <Typography variant="body2">‚Ä¢ ‡∏î‡πâ‡∏≤‡∏ô: {item.sides} ‡∏î‡πâ‡∏≤‡∏ô</Typography>
                    <Typography variant="body2">‚Ä¢ ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏µ: {item.colorMode === 'bw' ? '‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥' : item.colorMode === 'color' ? '‡∏™‡∏µ' : item.colorMode}</Typography>
                    <Typography variant="body2">‚Ä¢ ‡∏ß‡∏±‡∏™‡∏î‡∏∏: {item.material}</Typography>
                    <Typography variant="body2">‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤ : {item.totalPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó</Typography>
                  </Stack>
                )}
              </Box>
            ))}
          </Stack>
        </DialogContent>
        <DialogActions>
          {selectedOrder && selectedOrder.remainingTotal > 0 && (
            <Button variant="contained" color="success" onClick={() => setPayDialogOpen(true)}>
              ‡∏ä‡∏≥‡∏£‡∏∞‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            </Button>
          )}
          <Button onClick={() => setSelectedOrder(null)}>‡∏õ‡∏¥‡∏î</Button>
        </DialogActions>
      </Dialog>
      <PayRemainingModal
        open={payDialogOpen}
        orderId={selectedOrder?._id || ''}
        remaining={selectedOrder?.cart.reduce((s, i) => s + (i.remaining || 0), 0) || 0}
        onClose={() => setPayDialogOpen(false)}
        onSuccess={updated => {
          setOrders(prev => prev.map(o => (o._id === updated._id ? updated : o)));
          setSelectedOrder(updated);
        }}
      />
    </Container>
  );
}
