'use client';

import React, { useEffect, useState } from 'react';
import styles from './checkoutRight.module.css';

type CartItem = {
  key: string;
  name: string;
  variant: string;
  qty: number;
  unitPrice: number;
  note?: string;
  customerName?: string;
  companyName?: string;
  material?: string;
  sides?: string;
};

type Props = {
  cart: CartItem[];
  total: number;
  discount: number;
  onCheckout: (payment: 'cash' | 'promptpay') => void;
  onDiscountChange?: (discount: number) => void;
  onPaymentChange?: (payment: 'cash' | 'promptpay') => void;
};

const CheckOutRight: React.FC<Props> = ({
  cart,
  total,
  discount,
  onCheckout,
  onDiscountChange,
  onPaymentChange,
}) => {
  const [discountInput, setDiscountInput] = useState('');
  const [discountValue, setDiscountValue] = useState(0);
  const [discountType, setDiscountType] = useState<'percent' | 'fixed' | null>(null);
  const [payment, setPayment] = useState<'cash' | 'promptpay'>('cash');

  useEffect(() => {
    if (discount === 0) {
      setDiscountInput('');
      setDiscountValue(0);
      setDiscountType(null);
    }
  }, [discount]);

  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
  const finalTotal =
    discountType === 'percent'
      ? total - (total * discountValue) / 100
      : discountType === 'fixed'
        ? Math.max(total - discountValue, 0) // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏¥‡∏î‡∏•‡∏ö
        : total;

  const handleApplyDiscount = () => {
    const value = discountInput.trim();

    if (!value) {
      setDiscountValue(0);
      setDiscountType(null);
      onDiscountChange?.(0);
      return;
    }

    // ‚úÖ case ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î %
    if (value.endsWith('%')) {
      const percent = parseFloat(value.replace('%', ''));
      if (!isNaN(percent) && percent >= 0 && percent <= 100) {
        setDiscountValue(percent);
        setDiscountType('percent');
        onDiscountChange?.((total * percent) / 100);
      } else {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå 0-100%');
      }
    }
    // ‚úÖ case ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô -20
    else if (value.startsWith('-')) {
      const fixed = parseFloat(value.replace('-', ''));
      if (!isNaN(fixed) && fixed > 0) {
        setDiscountValue(fixed);
        setDiscountType('fixed');
        onDiscountChange?.(fixed);
      } else {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô -20');
      }
    } else {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡πÄ‡∏ä‡πà‡∏ô 10% ‡∏´‡∏£‡∏∑‡∏≠ -20');
    }
  };

  return (
    <div className={styles['master-container']}>
      {/* Cart */}
      <div className={`${styles.card} ${styles.cart}`}>
        <div className={styles.title}>üõí ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</div>
        <div className={styles.products}>
          {cart.map(item => (
            <div
              key={item.key}
              className={styles.product}
              style={{ alignItems: 'flex-start', paddingLeft: '0.25rem' }}>
              <div className={styles.details}>
                <div className={styles.name}>{item.name}</div>
                <ul
                  style={{
                    margin: 0,
                    paddingLeft: '0.25rem',
                    fontSize: '0.85rem',
                    color: '#000',
                  }}>
                  <li>üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {item.customerName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</li>
                  <li>üè¢ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó: {item.companyName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</li>
                  <li>üìë ‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå: {item.sides ? `‡∏û‡∏¥‡∏°‡∏û‡πå ${item.sides} ‡∏î‡πâ‡∏≤‡∏ô` : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</li>
                  <li>üìÑ ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©: {item.material || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</li>
                  <li>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {item.note || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</li>
                </ul>
              </div>
              <div className={styles.quantity}>
                <div>x{item.qty}</div>
                <span className={styles.price}>‡∏ø{(item.unitPrice * item.qty).toFixed(2)}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Coupon */}
      <div className={`${styles.card} ${styles.coupons}`}>
        <div className={styles.title}>üí∏ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î</div>
        <form
          onSubmit={e => {
            e.preventDefault();
            handleApplyDiscount();
          }}>
          <input
            type="text"
            placeholder="‡πÄ‡∏ä‡πà‡∏ô 10% ‡∏´‡∏£‡∏∑‡∏≠ -20"
            value={discountInput}
            onChange={e => setDiscountInput(e.target.value)}
            className={styles.input_field}
            style={{ color: '#000' }}
          />
          <button type="submit" className={styles['checkout-btn']}>
            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
          </button>
        </form>
        {discountType === 'percent' && (
          <p style={{ fontSize: '0.85rem', color: '#2e7d32', marginTop: '4px' }}>
            ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î {discountValue}%
          </p>
        )}
        {discountType === 'fixed' && (
          <p style={{ fontSize: '0.85rem', color: '#2e7d32', marginTop: '4px' }}>
            ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î {discountValue.toFixed(2)} ‡∏ö‡∏≤‡∏ó
          </p>
        )}
      </div>

      {/* Payment Method */}
      <div className={`${styles.card} ${styles.payment}`}>
        <div className={styles.title}>üí≥ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</div>

        <div className="flex flex-col gap-3 mt-3">
          <div className="flex items-center gap-3 p-3 border rounded-lg cursor-pointer hover:bg-gray-50">
            <input
              type="radio"
              id="cash"
              name="payment"
              value="cash"
              checked={payment === 'cash'}
              onChange={() => {
                setPayment('cash');
                onPaymentChange?.('cash');
              }}
              className="w-4 h-4 accent-black"
            />
            <label htmlFor="cash" className="flex items-center gap-2 cursor-pointer text-black">
              <span className="text-xl">üíµ</span>
              <span className="font-medium">‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î</span>
            </label>
          </div>

          <div className="flex items-center gap-3 p-3 border rounded-lg cursor-pointer hover:bg-gray-50">
            <input
              type="radio"
              id="promptpay"
              name="payment"
              value="promptpay"
              checked={payment === 'promptpay'}
              onChange={() => {
                setPayment('promptpay');
                onPaymentChange?.('promptpay');
              }}
              className="w-4 h-4 accent-black"
            />
            <label
              htmlFor="promptpay"
              className="flex items-center gap-2 cursor-pointer text-black">
              <span className="text-xl">üì±</span>
              <span className="font-medium">PromptPay</span>
            </label>
          </div>
        </div>
      </div>

      {/* Checkout */}
      <div className={`${styles.card} ${styles.checkout}`}>
        <div className={styles.title}>‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</div>
        <div className={styles.details}>
          <span>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:</span>
          <span>‡∏ø{total.toFixed(2)}</span>
        </div>
        {discountType && (
          <div className={styles.details}>
            <span>‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î:</span>
            <span>
              -‡∏ø
              {discountType === 'percent'
                ? ((total * discountValue) / 100).toFixed(2)
                : discountValue.toFixed(2)}
            </span>
          </div>
        )}
        <div className={styles.details}>
          <span>‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á:</span>
          <span>‡∏ø0.00</span>
        </div>
        <div className={styles['checkout--footer']}>
          <label className={styles.price}>
            <span className="currency">‡∏ø</span>
            {finalTotal.toFixed(2)}
          </label>
          <button
            className={styles['checkout-btn']}
            onClick={() => onCheckout(payment)}
            disabled={cart.length === 0}>
            ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          </button>
        </div>
      </div>
    </div>
  );
};

export default CheckOutRight;
